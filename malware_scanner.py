import PyPDF2
import re
import cv2  # Optional for image processing
from PIL import Image
import io

def extract_pdf_features(pdf_path):
    text = ""
    images = []

    with open(pdf_path, "rb") as pdf_file:
        pdf_reader = PyPDF2.PdfReader(pdf_file)
        for page_num in range(len(pdf_reader.pages)):
            page = pdf_reader.pages[page_num]
            text += page.extract_text()

            if page.images:
                for image_data in page.images:
                    image = Image.open(io.BytesIO(image_data.data))
                    images.append(image)
    return text, images

def analyze_for_malware(text, images):
    # Basic text-based analysis
    malware_keywords = ["virus", "trojan", "worm", "ransomware", "phishing"]
    if any(keyword in text for keyword in malware_keywords):
        print("Potential malware detected based on keywords in the text.")
        return True  # Potential malware detected

    # Optional image-based analysis (using OpenCV or deep learning models)
    # ...

    return False

def check_for_intrusion_indicators(text):
    intrusion_indicators = ["backdoor", "command and control", "remote access trojan"]
    if any(indicator in text for indicator in intrusion_indicators):
        print("Potential intrusion indicators found in the text.")
        return True  # Potential intrusion detected
    return False

def main():
    pdf_path = pdf_path = "M:/certificates/10 marks (2).pdf"

    try:
        text, images = extract_pdf_features(pdf_path)
        if analyze_for_malware(text, images):
            print("**WARNING:** Potential malware detected in the PDF.")
        else:
            print("No malware detected based on basic analysis.")

        if check_for_intrusion_indicators(text):
            print("**WARNING:** Potential intrusion indicators found in the PDF.")
        else:
            print("No intrusion indicators found based on keywords.")
    except Exception as e:
        print(f"Error occurred during analysis: {e}")

if __name__ == "__main__":
    main()